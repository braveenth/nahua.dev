<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nahua Kang</title>
    <link>/</link>
    <description>Recent content on Nahua Kang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kangnahua [at] gmail dot com (Nahua Kang)</managingEditor>
    <webMaster>kangnahua [at] gmail dot com (Nahua Kang)</webMaster>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 08 Feb 2020 11:19:44 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Template: Using Execute vs. ExecuteTemplate</title>
      <link>/posts/2020/08/golang-template-execute-vs-executetemplate/</link>
      <pubDate>Fri, 28 Aug 2020 21:59:26 +0200</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/08/golang-template-execute-vs-executetemplate/</guid>
      <description>Rendering the correct template is an important step in building a web application. If you are new to web programming in Go, chances are you might have come across two methods in the html/template package: func (*Template) Execute and func (*Template) ExecuteTemplate.
You might have also wondered: What are the differences between these two methods? The quick answer is to look up the official documentation:
 func (t *Template) Execute(wr io.</description>
    </item>
    
    <item>
      <title>Immutables Are Not Always Immutable</title>
      <link>/posts/2020/03/immutables-are-not-always-immutable/</link>
      <pubDate>Sun, 22 Mar 2020 11:05:25 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/03/immutables-are-not-always-immutable/</guid>
      <description>This post is still in WORK IN PROGRESS.
If you know a bit of Python, you probably have heard of immutable and mutable objects (see data model). Objects can either be mutable or immutable, depending on which type they are.
Immutables and Mutables: Basics First, let&amp;rsquo;s review the basics of immutables and mutables that we all know.
Mutable Objects Mutable ones can be changed after they are created. For Python, collections like list, dict, and set are mutable objects.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Sat, 08 Feb 2020 11:19:44 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/projects/</guid>
      <description>I am currently in learning mode.
Languages I speak Some of my current focuses include:
 Python and Django Ruby and Ruby on Rails Javascript and React JS MacVim  Just for fun and hobby:
 Golang and Hugo Clojure (purely for fun)  Ambition on projects I intend to be able to:
 Dig deeper into Python and Ruby Contribute to an open source project in either languages Complete CS50W course  Deep Learning Previously, I have completed Udacity&amp;rsquo;s Nanodegree Foundation in Deep Learning.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sat, 08 Feb 2020 10:29:09 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/about/</guid>
      <description>This blog My personal hero, Richard Feynman, knew that knowing the name of something is different from knowing that thing. This blog is the documentation of my personal struggle in learning new programming languages and tools so that I, and perhaps you, will understand it and explain it to a 6-year-old with ease.
Who am I I was born and raised in China but have the privilege of choosing where in the world I want to live and what kind of values I want to identify with.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/posts/2020/02/hello-world/</link>
      <pubDate>Fri, 07 Feb 2020 14:59:00 +0100</pubDate>
      <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
      <guid>/posts/2020/02/hello-world/</guid>
      <description>This is a blog post placeholder until I have real content.
For now, let me say to you in Python:
print(&amp;#34;Hello World!&amp;#34;) In Ruby:
puts &amp;#34;Hello World!&amp;#34; In Javascript:
console.log(&amp;#34;Hello World!&amp;#34;) In Go:
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } And in Clojure:
(println &amp;#34;Hello World&amp;#34;) </description>
    </item>
    
  </channel>
</rss>