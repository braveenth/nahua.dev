<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Nahua Kang</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Nahua Kang</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <managingEditor>kangnahua [at] gmail dot com (Nahua Kang)</managingEditor>
        <webMaster>kangnahua [at] gmail dot com (Nahua Kang)</webMaster>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 30 Aug 2020 19:01:38 +0200</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>My Programming Story</title>
            <link>/posts/2020/08/my-programming-story/</link>
            <pubDate>Sun, 30 Aug 2020 19:01:38 +0200</pubDate>
            <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
            <guid>/posts/2020/08/my-programming-story/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>Go Template: Using Execute vs. ExecuteTemplate</title>
            <link>/posts/2020/08/golang-template-execute-vs-executetemplate/</link>
            <pubDate>Fri, 28 Aug 2020 21:59:26 +0200</pubDate>
            <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
            <guid>/posts/2020/08/golang-template-execute-vs-executetemplate/</guid>
            <description>Rendering the correct template is an important step in building a web application. If you are new to web programming in Go, chances are you might have come across two methods in the html/template package: func (*Template) Execute and func (*Template) ExecuteTemplate.
You might have also wondered: What are the differences between these two methods? The quick answer is to look up the official documentation:
 func (t *Template) Execute(wr io.</description>
            <content type="html"><![CDATA[<p>Rendering the correct template is an important step in building a web application. If you are new to web programming in Go, chances are you might have come across two methods in the <code>html/template</code> package: <a href="https://golang.org/pkg/html/template/#Template.Execute"><code>func (*Template) Execute</code></a> and <a href="https://golang.org/pkg/html/template/#Template.ExecuteTemplate"><code>func (*Template) ExecuteTemplate</code></a>.</p>
<p>You might have also wondered: What are the differences between these two methods? The quick answer is to look up the official documentation:</p>
<ul>
<li><code>func (t *Template) Execute(wr io.Writer, data interface{}) error</code>:
Execute applies a parsed template to the specified data object, writing the output to <code>wr</code>.</li>
<li><code>func (t *Template) ExecuteTemplate(wr io.Writer, name string, data interface{}) error</code>:
ExecuteTemplate applies the template associated with t that has the given name to the specified data object and writes the output to wr.</li>
</ul>
<p>I don&rsquo;t know about you, but while the Go documentation is well-written, I could not understand the differences, especially what <code>name string</code> is.</p>
<p>So read on to find out how these two methods differ and when to use them.</p>
<h2 id="setup">Setup</h2>
<p>To answer this question, let&rsquo;s take a look at a simple example. Suppose we have a very mini web app <code>app</code> in the following file structure:</p>
<pre><code>.
├── layouts
│   └── index.html
└── main.go
</code></pre><p>Inside <code>index.html</code> we have a very basic homepage:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/index.html --&gt;</span>
&lt;<span style="color:#f92672">h1</span>&gt;Welcome to my Go Web App!&lt;/<span style="color:#f92672">h1</span>&gt;
</code></pre></div><h2 id="templateexecute">template.Execute</h2>
<p>To make this homepage appear on our localhost virtual server, we have to perform the following steps:</p>
<ol>
<li>Create a handler function, e.g. <code>index</code>, that would render <code>index.html</code></li>
<li>Register this handler <code>index</code> to our localhost server via <a href="https://golang.org/pkg/net/http/#HandleFunc"><code>http.HandleFunc</code></a></li>
<li>Start the server with <a href="https://golang.org/pkg/net/http/#ListenAndServe"><code>http.ListenAndServe</code></a> and listen on a port for requests</li>
</ol>
<p>Here&rsquo;s a generic boilerplate for our mini Go app with 1 route:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// app/main.go
</span><span style="color:#75715e"></span>
<span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;html/template&#34;</span>
	<span style="color:#e6db74">&#34;net/http&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">index</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFiles</span>(<span style="color:#e6db74">&#34;layouts/index.html&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Execute</span>(<span style="color:#a6e22e">w</span>, <span style="color:#66d9ef">nil</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">index</span>)
	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#66d9ef">nil</span>)
}
</code></pre></div><p>Notice that we are parsing one HTML file with <a href="https://golang.org/pkg/html/template/#ParseFiles"><code>template.ParseFiles</code></a>, with the parsed result returned as a <code>* Template</code> and assigned to our variable <code>t</code>. Because of this, we could immediately execute on the parsed template <code>t</code> and send its content as well as data (in this case <code>nil</code>, or none) to the <code>http.ResponseWriter</code>, which then displays the HTML content when localhost server responds to a request from us on the browser.</p>
<p>Inside your terminal, run the following command in your project&rsquo;s root directory and then type in <code>localhost:8080</code> in your browser, you should see this very simple app running:</p>
<pre><code class="language-console" data-lang="console">$ go run main.go
</code></pre><h2 id="expanding-our-mini-web-app">Expanding Our Mini Web App</h2>
<p>Imagine your mini web app has gained traction among users and now you want to refactor it so that you can build it in a more scalable manner. You looked around the app carefully and decides that, for each new page you create, you&rsquo;d want to add a header and a footer.</p>
<p>What&rsquo;s more, you want a base template <code>layout.html</code> that would include the header, the footer, and then render the content of any page based on the request. If a user requests <code>index.html</code>, they&rsquo;ll get it with the header and footer attached. If they decide to request a new <code>contact.html</code>, they&rsquo;ll get it with the header and footer attached as well.</p>
<p>Our app now looks like this:</p>
<pre><code class="language-console" data-lang="console">.
├── layouts
│   ├── contact.html
│   ├── footer.html
│   ├── header.html
│   ├── index.html
│   └── layout.html
└── main.go

</code></pre><p>So for our current <code>index.html</code>, we&rsquo;d have:</p>
<ul>
<li>Layout Template
<ul>
<li>Header Template</li>
<li>Content Template (of Index or of Contact)</li>
<li>Footer Template</li>
</ul>
</li>
</ul>
<p>How do we achieve this with HTML? Well, we can&rsquo;t easily, but Go&rsquo;s built-in template language helps us to organize our HTML pages nicely. To define a template is as simple as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">{{ define &#34;templateName&#34;}}
  <span style="color:#75715e">&lt;!-- HTML code --&gt;</span>
{{ end }}
</code></pre></div><p>So we could define our basic header and footer templates as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/header.html --&gt;</span>
{{define &#34;header&#34;}}
&lt;<span style="color:#f92672">nav</span>&gt;Navbar&lt;/<span style="color:#f92672">nav</span>&gt;
{{end}}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/footer.html --&gt;</span>
{{define &#34;footer&#34;}}
&lt;<span style="color:#f92672">footer</span>&gt;Copyright 2020&lt;/<span style="color:#f92672">footer</span>&gt;
{{end}}
</code></pre></div><p>And let&rsquo;s move the HTML code in our <code>index.html</code> into a template definition as well:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/index.html --&gt;</span>
{{define &#34;content&#34;}}
&lt;<span style="color:#f92672">h1</span>&gt;Welcome!&lt;/<span style="color:#f92672">h1</span>&gt;
{{end}}
</code></pre></div><p>To use a template, we simply insert it into a new layout template, but this time using the pattern:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/layout.html --&gt;</span>
{{define &#34;layout&#34;}}

  {{template &#34;header&#34;}}

  {{template &#34;content&#34;}}

  {{template &#34;footer&#34;}}

{{end}}
</code></pre></div><p>Before we move on, let&rsquo;s create our contact page and modify our index page:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/index.html --&gt;</span>
{{define &#34;content&#34;}}
&lt;<span style="color:#f92672">h1</span>&gt;Welcome!&lt;/<span style="color:#f92672">h1</span>&gt;
{{end}}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!-- app/layouts/contact.html --&gt;</span>
{{define &#34;content&#34;}}
&lt;<span style="color:#f92672">h1</span>&gt;Contact Us&lt;/<span style="color:#f92672">h1</span>&gt;
{{end}}
</code></pre></div><h2 id="templateexecutetemplate">template.ExecuteTemplate</h2>
<p>Woah! Have you noticed that now we have a bunch of HTML files using Go&rsquo;s template language syntax? If you re-run <code>$ go run main.go</code> in your terminal and visit <code>localhost:8080</code>, you won&rsquo;t see anything!</p>
<p>This is because we&rsquo;ve wrapped all of our HTML code inside these <code>define</code> and <code>template</code> blocks and our Go app does not know what to render for the user anymore. If we had just one HTML file that isn&rsquo;t completely wrapped in Go template, we would still be fine using <code>template.Execute</code>, but now we must somehow tell our Go app which template to execute.</p>
<p>Inside an HTML file, we could specify the rendering of our header by <code>{{template &quot;header&quot;}}</code>. But now our <code>layout.html</code>, which would dynamically generate either the content of <code>index</code> or <code>contact</code>, is itself wrapped in a define statement.</p>
<p>Here&rsquo;s where <code>template.ExecuteTemplate</code> comes in. We could parse as many files as we wish and then ask the parsed template to execute a specific template which it has parsed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFiles</span>(<span style="color:#f92672">...</span><span style="color:#a6e22e">files</span>)
<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">executeTemplate</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;layout&#34;</span>, <span style="color:#66d9ef">nil</span>)
</code></pre></div><p>The new <code>main.go</code> looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// app/main.go
</span><span style="color:#75715e">// Ignoring package main and import lines
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">index</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFiles</span>(
		<span style="color:#e6db74">&#34;layouts/layout.html&#34;</span>,
		<span style="color:#e6db74">&#34;layouts/header.html&#34;</span>,
		<span style="color:#e6db74">&#34;layouts/index.html&#34;</span>,
		<span style="color:#e6db74">&#34;layouts/footer.html&#34;</span>,
	)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
  }
  <span style="color:#75715e">// Now we must set the header to &#34;text/html&#34; to render properly
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;text/html&#34;</span>)
	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">ExecuteTemplate</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;layout&#34;</span>, <span style="color:#66d9ef">nil</span>)
}
</code></pre></div><p>We can do the same for our contact page and update our handler:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">contact</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFiles</span>(
		<span style="color:#e6db74">&#34;layouts/layout.html&#34;</span>,
		<span style="color:#e6db74">&#34;layouts/header.html&#34;</span>,
		<span style="color:#e6db74">&#34;layouts/contact.html&#34;</span>,
		<span style="color:#e6db74">&#34;layouts/footer.html&#34;</span>,
	)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
  }
  <span style="color:#75715e">// Now we must set the header to &#34;text/html&#34; to render properly
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;text/html&#34;</span>)
	<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">ExecuteTemplate</span>(<span style="color:#a6e22e">w</span>, <span style="color:#e6db74">&#34;layout&#34;</span>, <span style="color:#66d9ef">nil</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">index</span>)
	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/contact&#34;</span>, <span style="color:#a6e22e">contact</span>)
	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#66d9ef">nil</span>))
}
</code></pre></div><h2 id="refactor-optional">Refactor (Optional)</h2>
<p>The smart and diligent as you are, you can not tolerate duplicated code and want to follow through with the DRY (Don&rsquo;t Repeat Yourself) principle. So let&rsquo;s extract out some elements of the code above to make it cleaner while using <code>template.ExecuteTemplate</code>.</p>
<p>First, let&rsquo;s re-organize our HTML files like this:</p>
<pre><code>.
├── main.go
└── views
    ├── contact.html
    ├── index.html
    └── layouts
        ├── footer.html
        ├── header.html
        └── layout.html
</code></pre><p>Next, we&rsquo;ll use Go&rsquo;s <a href="https://golang.org/pkg/path/filepath/#Glob">filepath.Glob</a> to glob all the layout files, <code>layout</code>, <code>header</code>, and <code>footer</code>, as a slice of strings.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// app/main.go
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> (
	<span style="color:#a6e22e">layoutDir</span> = <span style="color:#e6db74">&#34;views/layouts/&#34;</span>
	<span style="color:#a6e22e">fileExt</span>   = <span style="color:#e6db74">&#34;.html&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">layoutFiles</span>() []<span style="color:#66d9ef">string</span> {
	<span style="color:#75715e">// Using the pattern &#34;layouts/*.html&#34; to glob all files
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">files</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">filepath</span>.<span style="color:#a6e22e">Glob</span>(<span style="color:#a6e22e">layoutDir</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;*&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">fileExt</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">files</span>)
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">files</span>
}
</code></pre></div><p>Let&rsquo;s also create a new data structure <code>view</code> that we&rsquo;ll use to store all necessary information to render our HTML files and give it the <code>render</code> method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// app/main.go
</span><span style="color:#75715e">// Declare the pointer to view variables to be used in main()
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">homeView</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">view</span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">contactView</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">view</span>

<span style="color:#75715e">// This is our new data structure to store all information about our views
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">view</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Template</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">Template</span>
	<span style="color:#a6e22e">Layout</span>   <span style="color:#66d9ef">string</span>
}

<span style="color:#75715e">// This is a method for the receiver type *view
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">v</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">view</span>) <span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">data</span> <span style="color:#66d9ef">interface</span>{}) <span style="color:#66d9ef">error</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">Template</span>.<span style="color:#a6e22e">ExecuteTemplate</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">v</span>.<span style="color:#a6e22e">Layout</span>, <span style="color:#a6e22e">data</span>)
}
</code></pre></div><p>On top of that, we&rsquo;ll create a <code>newView</code> function to generate a new view:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// app/main.go
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// newView generates a new *view with parsed template and layout type stored
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">newView</span>(<span style="color:#a6e22e">layout</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">files</span> <span style="color:#f92672">...</span><span style="color:#66d9ef">string</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">view</span> {
	<span style="color:#a6e22e">files</span> = append(
		<span style="color:#a6e22e">files</span>,
		<span style="color:#a6e22e">layoutFiles</span>()<span style="color:#f92672">...</span>,
	)

	<span style="color:#a6e22e">t</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">template</span>.<span style="color:#a6e22e">ParseFiles</span>(<span style="color:#a6e22e">files</span><span style="color:#f92672">...</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#66d9ef">return</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">view</span>{
		<span style="color:#a6e22e">Template</span>: <span style="color:#a6e22e">t</span>,
		<span style="color:#a6e22e">Layout</span>:   <span style="color:#a6e22e">layout</span>,
	}
}
</code></pre></div><p>Finally, we&rsquo;ll update our handler:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// app/main.go
</span><span style="color:#75715e">// A helper function to panic if error occurs when rendering
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">must</span>(<span style="color:#a6e22e">err</span> <span style="color:#66d9ef">error</span>) {
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}
}

<span style="color:#75715e">// New home handler
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">index</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;text/html&#34;</span>)
	<span style="color:#a6e22e">must</span>(<span style="color:#a6e22e">homeView</span>.<span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">w</span>, <span style="color:#66d9ef">nil</span>))
}

<span style="color:#75715e">// New contact handler
</span><span style="color:#75715e"></span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">contact</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;text/html&#34;</span>)
	<span style="color:#a6e22e">must</span>(<span style="color:#a6e22e">contactView</span>.<span style="color:#a6e22e">render</span>(<span style="color:#a6e22e">w</span>, <span style="color:#66d9ef">nil</span>))
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">homeView</span> = <span style="color:#a6e22e">newView</span>(<span style="color:#e6db74">&#34;layout&#34;</span>, <span style="color:#e6db74">&#34;views/index.html&#34;</span>)
	<span style="color:#a6e22e">contactView</span> = <span style="color:#a6e22e">newView</span>(<span style="color:#e6db74">&#34;layout&#34;</span>, <span style="color:#e6db74">&#34;views/contact.html&#34;</span>)

	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">index</span>)
	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/contact&#34;</span>, <span style="color:#a6e22e">contact</span>)

	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8080&#34;</span>, <span style="color:#66d9ef">nil</span>))
}
</code></pre></div><p>As a final step, maybe we&rsquo;ll extract some of the above-mentioned refactoring into a new file <code>app/views/view.go</code>. That&rsquo;s left for the reader to do as a mini-exercise.</p>
<h2 id="the-end">The End</h2>
<p>Hopefully by now, you&rsquo;ll see why sometimes we might need to use <code>template.ExecuteTemplate</code> instead of <code>template.Execute</code>. These two methods are very common and will repeatedly occur in your Go web apps, so play around with the code and take all the time you need to digest the information.</p>
<p>Happy programming in Go!</p>
]]></content>
        </item>
        
        <item>
            <title>Python: Immutables Are Not Always Immutable</title>
            <link>/posts/2020/03/python-immutables-are-not-always-immutable/</link>
            <pubDate>Sun, 22 Mar 2020 11:05:25 +0100</pubDate>
            <author>kangnahua [at] gmail dot com (Nahua Kang)</author>
            <guid>/posts/2020/03/python-immutables-are-not-always-immutable/</guid>
            <description>If you know a bit of Python, you probably have heard of immutable and mutable objects (see data model). Objects can either be mutable or immutable, depending on which type they are.
Immutables and Mutables: Basics First, let&amp;rsquo;s review the basics of immutables and mutables that we all know.
Mutable Objects Mutable ones can be changed after they are created. For Python, collections like list, dict, and set are mutable objects.</description>
            <content type="html"><![CDATA[<p>If you know a bit of Python, you probably have heard of <em>immutable</em> and <em>mutable</em> objects (see <a href="https://docs.python.org/3.8/reference/datamodel.html">data model</a>). Objects can either be mutable or immutable, depending on which type they are.</p>
<h2 id="immutables-and-mutables-basics">Immutables and Mutables: Basics</h2>
<p>First, let&rsquo;s review the basics of immutables and mutables that we all know.</p>
<h3 id="mutable-objects">Mutable Objects</h3>
<p>Mutable ones can be changed after they are created. For Python, collections like <code>list</code>, <code>dict</code>, and <code>set</code> are mutable objects. If we create a list, we can change its elements.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> lst <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;list&#34;</span>,  <span style="color:#e6db74">&#34;objects&#34;</span>,  <span style="color:#e6db74">&#34;are&#34;</span>, <span style="color:#e6db74">&#34;immutable?&#34;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> lst
[<span style="color:#e6db74">&#34;list&#34;</span>,  <span style="color:#e6db74">&#34;objects&#34;</span>,  <span style="color:#e6db74">&#34;are&#34;</span>, <span style="color:#e6db74">&#34;immutable?&#34;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> lst[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;mutable!&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> lst
[<span style="color:#e6db74">&#34;list&#34;</span>,  <span style="color:#e6db74">&#34;objects&#34;</span>,  <span style="color:#e6db74">&#34;are&#34;</span>, <span style="color:#e6db74">&#34;mutable!&#34;</span>]
</code></pre></div><h3 id="immutable-objects">Immutable Objects</h3>
<p>Immutable objects cannot be changed after creation. <code>bool</code>, <code>int</code>, <code>float</code>, <code>str</code>, <code>frozenset</code>, and <code>tuple</code> are immutable. So we will get an error if we attempt to reassign a tuple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> t <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> type(t)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">tuple</span><span style="color:#e6db74">&#39;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> t[<span style="color:#ae81ff">1</span>]
<span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> t[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
<span style="color:#a6e22e">TypeError</span>: <span style="color:#e6db74">&#39;tuple&#39;</span> object does <span style="color:#f92672">not</span> support item assignment
</code></pre></div><p>Try create a variable that references to a string object, such as <code>string = 'hello'</code>. If you attempted to reassign one element of the string (<code>string[1] = 'h'</code>), Python console would throw the same <code>TypeError</code>.</p>
<h3 id="slightly-trickier-objects">Slightly Trickier Objects</h3>
<p>If <code>tuple</code> is immutable and <code>list</code> is mutable, what about a tuple of lists then? Is a tuple like <code>([1, 2], [3, 4])</code> mutable or immutable?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> tulip <span style="color:#f92672">=</span> ([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>])    <span style="color:#75715e"># Create a tuple of two lists</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> tulip
([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>])
<span style="color:#f92672">&gt;&gt;&gt;</span> tulip[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>]           <span style="color:#75715e"># Attempt to change the element results in error</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
<span style="color:#a6e22e">TypeError</span>: <span style="color:#e6db74">&#39;tuple&#39;</span> object does <span style="color:#f92672">not</span> support item assignment
<span style="color:#f92672">&gt;&gt;&gt;</span> tulip[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>             <span style="color:#75715e"># Changing element of the list itself works</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> tulip
([<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>])
</code></pre></div><h2 id="immutables-and-mutables-dive-deeper">Immutables and Mutables: Dive Deeper</h2>
<p>As you can see, the story is a little bit more complicated. On the one hand, we cannot reassign an element of the tuple because tuples are immutable. On the other hand, we can reassign an element of a list inside a tuple, because lists are mutable.</p>
<p>To understand this topic better, we can go deeper into the knitty gritties of Python.</p>
<h3 id="everything-in-python-is-an-object">Everything in Python is an Object</h3>
<p>In Python, everything is an object. So when you see an integer <code>1</code> or a string <code>'hello'</code>, they are objects, too. Just try typing <code>type(0)</code> or <code>type('a')</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> type(<span style="color:#ae81ff">1</span>)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">int</span><span style="color:#e6db74">&#39;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> type(<span style="color:#e6db74">&#39;a&#39;</span>)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">str</span><span style="color:#e6db74">&#39;&gt;</span>
</code></pre></div><p>They are instances of the class integer and the class string.</p>
<h3 id="refining-our-definition-of-object-mutability">Refining Our Definition of Object Mutability</h3>
<p>For an object in memory, it might contain information such as its object type and some data. In the realm of Python, changing the data inside an object is called modifying the <em><strong>internal state</strong></em> of this object. If we change the data inside an object and the object&rsquo;s memory address has not changed, the object is <em><strong>mutated</strong></em>.</p>
<p>So now we can refine our definition of Python objects&rsquo; mutability:</p>
<ul>
<li>An object whose internal state can be changed is a <em><strong>mutable</strong></em>.</li>
<li>An object whose internal state cannot be changed is an <em><strong>immutable</strong></em>.</li>
</ul>
<h3 id="immutables">Immutables</h3>
<p>As we discussed, numbers (<code>int</code>, <code>float</code>, <code>booleans</code>, etc.), strings, and tuples are immutables. An integer object, could contain the information of the type <code>class 'int'</code> and a value of <code>1</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> type(<span style="color:#ae81ff">1</span>)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">int</span><span style="color:#e6db74">&#39;&gt;</span>
</code></pre></div><p>When we declare a variable <code>a = 1</code>, the variable itself does not really hold the value <code>1</code>. Instead, the variable is a <em>reference</em> to a value that is an integer object <code>1</code>, which is an instance of the integer class.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>If this sounded a bit abstract, try think of the integer <code>1</code> as if it existed in the Python universe all along, with its own address in this universe. When we declare <code>a = 1</code>, we have simply created a name to point to this integer as a reference.</p>
<p>In a way, we could create many names for the integer <code>1</code>. Let&rsquo;s try playing with the integer object <code>1</code> inside the Python console a bit:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> id(<span style="color:#ae81ff">1</span>)     <span style="color:#75715e"># The address where integer value 1 lives in</span>
<span style="color:#ae81ff">4362298512</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(a)     <span style="color:#75715e"># The address of the value that variable &#39;a&#39; points to</span>
<span style="color:#ae81ff">4362298512</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> b <span style="color:#f92672">=</span> a     <span style="color:#75715e"># Assign &#39;b&#39; to the same value that &#39;a&#39; points to</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(b)     <span style="color:#75715e"># The address that &#39;b&#39; points to is the same that &#39;a&#39; points to</span>
<span style="color:#ae81ff">4362298512</span>
</code></pre></div><p>As you can see, the integer <code>1</code> has its own address (the exact address will most certainly differ in the universe of your computer), in this case, <code>4362298512</code>. If we assigned variable <code>a</code> to the integer object <code>1</code>, we merely declared a <em>noun</em> that references the address of <code>1</code>.</p>
<p>When we then declared another variable <code>b</code> to the variable <code>a</code>, we are literally telling Python to let the variable <code>b</code> be a reference to the same value that <code>a</code> is pointing to, which is the integer object <code>1</code>.</p>
<p>Let&rsquo;s dig deeper. If we perform the operation <code>a = a + 1</code>, we do not change the value of this integer object at the memory address of <code>4362298512</code>. Instead, Python creates another integer object with value <code>2</code>, to which we now point the variable <code>a</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#75715e"># What happens if we add 1 to the variable &#39;a&#39;?</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(a)     <span style="color:#75715e"># &#39;a&#39; points to a new address</span>
<span style="color:#ae81ff">4362298544</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(<span style="color:#ae81ff">2</span>)     <span style="color:#75715e"># which is the same address that integer 2 lives on</span>
<span style="color:#ae81ff">4362298544</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(<span style="color:#ae81ff">1</span>)     <span style="color:#75715e"># Integer 1 still lives on its own address</span>
<span style="color:#ae81ff">4362298512</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(b)     <span style="color:#75715e"># &#39;b&#39; still points to integer 1</span>
<span style="color:#ae81ff">4362298512</span>
</code></pre></div><p>You probably realized it already: We cannot alter the internal state of the integer object 1. It is immutable. When we do <code>a = a + 1</code>, we create a new integer object <code>2</code> and re-point our variable name <code>a</code> to <code>2</code> instead of incrementing the value of <code>1</code> by 1.</p>
<h3 id="mutables">Mutables</h3>
<p>Let&rsquo;s create a class in Python called <code>Person</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>:
    <span style="color:#66d9ef">def</span> __init__(self, first_name, last_name, age):
        self<span style="color:#f92672">.</span>first_name <span style="color:#f92672">=</span> first_name
        self<span style="color:#f92672">.</span>last_name <span style="color:#f92672">=</span> last_name
        self<span style="color:#f92672">.</span>age <span style="color:#f92672">=</span> age
</code></pre></div><p>A <code>Person</code> object could contain the type <code>class '__main__.Person'</code>with additional data such as <code>first_name</code>, <code>last_name</code>, and <code>age</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> nahua <span style="color:#f92672">=</span> Person(<span style="color:#e6db74">&#34;Nahua&#34;</span>, <span style="color:#e6db74">&#34;Kang&#34;</span>, <span style="color:#ae81ff">29</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> type(nahua)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">__main__</span><span style="color:#f92672">.</span>Person<span style="color:#e6db74">&#39;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> isinstance(nahua, Person)
True
<span style="color:#f92672">&gt;&gt;&gt;</span> nahua<span style="color:#f92672">.</span>first_name
<span style="color:#e6db74">&#39;Nahua&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> nahua<span style="color:#f92672">.</span>last_name
<span style="color:#e6db74">&#39;Kang&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> nahua<span style="color:#f92672">.</span>age
<span style="color:#ae81ff">29</span>
</code></pre></div><p>We can go so far as to check up the address that the object <code>nahua</code> resides on in memory and see if we can alter the data inside the object:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> id(nahua)
<span style="color:#ae81ff">4374562064</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> nahua<span style="color:#f92672">.</span>first_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;nashua&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(nahua)
<span style="color:#ae81ff">4374562064</span>
</code></pre></div><h2 id="immutable-of-mutables">Immutable of Mutables</h2>
<p>Coming back to our original, tricky example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> tulip <span style="color:#f92672">=</span> ([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>])    <span style="color:#75715e"># Create a tuple of two lists</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> tulip
([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>])
<span style="color:#f92672">&gt;&gt;&gt;</span> id(tulip)
<span style="color:#ae81ff">140313768890112</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(tulip[<span style="color:#ae81ff">0</span>])
<span style="color:#ae81ff">140313769534800</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> id(tulip[<span style="color:#ae81ff">1</span>])
<span style="color:#ae81ff">140313768720576</span>
</code></pre></div><p>Notice that a <code>tuple</code> is immutable. So we have assigned the variable <code>tulip</code> to a tuple whose internal state contains two <code>lists</code>, each with a specific ID address.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> tulip[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> [<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>]           <span style="color:#75715e"># Cannot re-assign one element of an immutable to a new object</span>
Traceback (most recent call last):
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>, <span style="color:#f92672">in</span> <span style="color:#f92672">&lt;</span>module<span style="color:#f92672">&gt;</span>
<span style="color:#a6e22e">TypeError</span>: <span style="color:#e6db74">&#39;tuple&#39;</span> object does <span style="color:#f92672">not</span> support item assignment
</code></pre></div><p>If we try to re-assign the first list of our tuple <code>tulip</code> to another list object, which has a different ID address, that would not work. This is because the tuple is <strong>immutable</strong>, as in we cannot change the ID addresses of the elements in its internal state.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> tulip[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>   <span style="color:#75715e"># But that element, which is mutable, can change its elements</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> tulip
([<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>])
<span style="color:#f92672">&gt;&gt;&gt;</span> id(tulip[<span style="color:#ae81ff">0</span>])      <span style="color:#75715e"># The first list object&#39;s ID is not changed</span>
<span style="color:#ae81ff">140313769534800</span>       <span style="color:#75715e"># which means we did not modify the internal state of an immutable</span>
</code></pre></div><p>However, each of its two list objects is <strong>mutable</strong>, which means that we can modify their internal states legally. This is why we could modify the mutable inside an immutable.</p>
<h2 id="the-end">The End</h2>
<p>While in most cases, Python immutables are immutable and mutables are mutable. But in some cases we&rsquo;d run into immutables that contain mutable elements and it would be important to know when these cases occur. The rule of thumb is to understand the relationship between the ID of an object and the IDs of its elements in relationship to the object&rsquo;s type and mutability/immutability.</p>
<p>Hopefully this post helps you a bit. Happy programming in Python :)</p>
]]></content>
        </item>
        
    </channel>
</rss>
